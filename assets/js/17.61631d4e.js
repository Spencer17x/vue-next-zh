(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{337:function(t,e,n){"use strict";n.r(e);var r=n(33),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"逻辑重用和代码组织"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑重用和代码组织"}},[t._v("#")]),t._v(" 逻辑重用和代码组织")]),t._v(" "),n("p",[t._v("我们都喜欢Vue非常容易上手，并使中小型应用程序的构建变得轻而易举。\n但是如今，随着Vue的采用率增长，许多用户也正在使用Vue来构建大型项目，这些项目是由多个开发人员组成的团队在很长的时间内进行迭代和维护的。\n多年来，我们目睹了其中一些项目遇到了Vue当前API所带来的编程模型的限制。\n这些问题可以概括为两类：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("随着功能的增长，复杂组件的代码变得越来越难以推理。\n这种情况尤其发生在开发人员正在阅读自己未编写的代码时。\n根本原因是Vue的现有API通过选项强制执行代码组织，但是在某些情况下，通过逻辑考虑来组织代码更有意义。")])]),t._v(" "),n("li",[n("p",[t._v("一种干净且免费的机制，用于提取和重用多个组件之间的逻辑。（更多细节在 "),n("RouterLink",{attrs:{to:"/logic-extraction-and-reuse/"}},[t._v("逻辑提取和重用")]),t._v("）")],1)])]),t._v(" "),n("p",[t._v("该RFC中提出的API在组织组件代码时为用户提供了更大的灵活性。\n现在可以将代码组织为每个函数都处理特定功能的函数，而不必总是通过选项来组织代码。\nAPI还使在组件之间甚至外部组件之间提取和重用逻辑变得更加简单。\n我们将在 "),n("RouterLink",{attrs:{to:"/detailed-design/"}},[t._v("详细设计")]),t._v(" 部分中说明如何实现这些目标。")],1)])}),[],!1,null,null,null);e.default=s.exports}}]);